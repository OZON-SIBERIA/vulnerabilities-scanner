<?php


namespace App\Service;


use PhpParser\Node;
use PhpParser\NodeTraverser;
use PhpParser\NodeVisitorAbstract;

class Walkers
{
    public static function findXSS()
   {
        $subtraverser = new NodeTraverser;
        $subtraverser->addVisitor(new class extends NodeVisitorAbstract{
            public function enterNode(Node $node)
            {
                return parent::enterNode($node); // TODO: Change the autogenerated stub
            }
        });
   }

   public static function findSQL()
   {

   }
    /*elseif ($node instanceof Node\Stmt\Echo_
        && $node->expr->nodeType instanceof Node\Expr\ArrayDimFetch
        && $node->expr->nodeType->var->name->string() === '_GET') {
        $this->vulnInfo->append(array('XSS' => 'approved', 'startline' => $node->getStartLine(),
            'endline' => $node->getEndLine()));
    }
    if ($node instanceof Node\Stmt\Expression
        && $node->exprs->nodeType->string() === "Expr_Variable"
        && $node->exprs->nodeType->string() === "Expr_ArrayDimFetch"
        && $node->exprs->nodeType->var->name->string() === "_GET") {
        $varThreads->append('name' => $node->exprs->)
        $vulnInfo->append(array('XSS' => 'predicted', 'startline' => $node->getAttribute('startLine'),
            'endline' => $node->getAttribute('endLine')));
    }*/
    /*$this->vulnInfo->append(array('status' => 'XSSapproved', 'startline' => $node->getStartLine(),
    'endline' => $node->getEndLine()));*/


if($expr instanceof Node\Expr\Assign) {
    $proof += 1;
}
if($proof == 2)
{
    $this->vars->append(array('var' => ($expr->var->name),'startline' => $node->getStartLine(),
        'endline' => $node->getEndLine()));
}
}